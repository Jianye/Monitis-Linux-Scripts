#!/bin/bash
#############################################################################
#	RIAK MONITOR START SCRIPT                                           #
#	Author: Arthur Tumanyan <arthurtumanyan@yahoo.com>                  #
#	Company: Netangels <http://www.netangels.net>                       # 
#############################################################################
#
# sources included
SOURCE_PATH=
#
source ${SOURCE_PATH}monitis_api.sh   || exit 2
source ${SOURCE_PATH}monitis_constant.sh || exit 2

ADDITIONAL_PARAMS=""
MONITOR_NAME="Riak_Monitor"_`hostname`
MONITOR_TAG="riak"
MONITOR_TYPE="customMonitor"
#
RIAK_ADMIN=/usr/sbin/riak-admin
TMP_RIAK=.tmp_riak
MONITOR_ID_FILE=.monitor.id
#
declare data
declare postdata
declare result
declare UOM
UOM=''
#
function get_data()
{
#
data=$($RIAK_ADMIN status|grep -v '<<'|awk '{print $1,$3}'|grep -v '{'|tail -n +5 > $TMP_RIAK)
#
RIAK_PID=$(ps aux|grep "\-progname riak"|grep -v 'grep'|awk '{print $2}')
#
vm_peak=$(cat /proc/$RIAK_PID/status|grep 'VmPeak'|awk '{print $2}')
UOM=$(cat /proc/$RIAK_PID/status|grep 'VmSize'|awk '{print $3}')
postdata=$postdata"vm_peak:$vm_peak;"
result=$result"vm_peak:Virtual+Memory+Peak:$UOM:2;";
#
vm_size=$(cat /proc/$RIAK_PID/status|grep 'VmSize'|awk '{print $2}')
UOM=$(cat /proc/$RIAK_PID/status|grep 'VmSize'|awk '{print $3}')
postdata=$postdata"vm_size:$vm_size;"
result=$result"vm_size:Virtual+Memory+Size:$UOM:2;";
#
vm_data=$(cat /proc/$RIAK_PID/status|grep 'VmData'|awk '{print $2}')
UOM=$(cat /proc/$RIAK_PID/status|grep 'VmData'|awk '{print $3}')
postdata=$postdata"vm_data:$vm_data;"
result=$result"vm_data:Data+Segment+Size:$UOM:2;";
#
#
cached_memory=$(cat /proc/meminfo|grep 'Cached'|head -1|awk '{print $2}')
UOM=$(cat /proc/meminfo|grep 'Cached'|head -1|awk '{print $3}')
postdata=$postdata"cached_memory:$cached_memory;"
result=$result"cached_memory:File+System+Swap:$UOM:2;";
#
UOM=
#
node_puts=$(grep 'node_puts' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"node_puts:$node_puts;"
result=$result"node_puts:Number+of+PUTs:$UOM:2;";
#
#
vnode_index_reads=$(grep 'vnode_index_reads' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"vnode_index_reads:$vnode_index_reads;"
result=$result"vnode_index_reads:Vnode+index+reads:$UOM:2;";
#
vnode_index_writes=$(grep 'vnode_index_writes' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"vnode_index_writes:$vnode_index_writes;"
result=$result"vnode_index_writes:Vnode+index+writes:$UOM:2;";
#
vnode_index_writes_total=$(grep 'vnode_index_writes_total' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"vnode_index_writes_total:$vnode_index_writes_total;"
result=$result"vnode_index_writes_total:Vnode+index+writes+total:$UOM:2;";
#
vnode_index_writes_postings=$(grep 'vnode_index_writes_postings' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"vnode_index_writes_postings:$vnode_index_writes_postings;"
result=$result"vnode_index_writes_postings:Vnode+index+writes+postings:$UOM:2;";
#
vnode_index_deletes=$(grep 'vnode_index_deletes' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"vnode_index_deletes:$vnode_index_deletes;"
result=$result"vnode_index_deletes:Vnode+index+deletes:$UOM:2;";
#
vnode_index_deletes_postings=$(grep 'vnode_index_deletes_postings' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"vnode_index_deletes_postings:$vnode_index_deletes_postings;"
result=$result"vnode_index_deletes_postings:Vnode+index+deletes+postings:$UOM:2;";
#
read_repairs=$(grep 'read_repairs' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"read_repairs:$read_repairs;"
result=$result"read_repairs:Read+repairs:$UOM:2;";
#
vnode_gets_total=$(grep 'vnode_gets_total' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"vnode_gets_total:$vnode_gets_total;"
result=$result"vnode_gets_total:Vnode+gets+total:$UOM:2;";
#
vnode_puts_total=$(grep 'vnode_puts_total' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"vnode_puts_total:$vnode_puts_total;"
result=$result"vnode_puts_total:Vnode+puts+total:$UOM:2;";
#
precommit_fail=$(grep 'precommit_fail' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"precommit_fail:$precommit_fail;"
result=$result"precommit_fail:Precommit+fail:$UOM:2;";
#
postcommit_fail=$(grep 'postcommit_fail' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"postcommit_fail:$postcommit_fail;"
result=$result"postcommit_fail:Postcommit+fail:$UOM:2;";
#
pbc_connects_total=$(grep 'pbc_connects_total' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"pbc_connects_total:$pbc_connects_total;"
result=$result"pbc_connects_total:PBC+connects+total:$UOM:2;";
#
pbc_connects=$(grep 'pbc_connects' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"pbc_connects:$pbc_connects;"
result=$result"pbc_connects:PBC+connects:$UOM:2;";
#
pbc_active=$(grep 'pbc_active' $TMP_RIAK|head -1|awk '{print $2}')
postdata=$postdata"pbc_active:$pbc_active;"
result=$result"pbc_active:PBC+active:$UOM:2;";
#
#end of get_data
test -f $TMP_RIAK && rm $TMP_RIAK > /dev/null
#
}
#
echo "***Riak Monitor start with following parameters***"
echo "Monitor name = $MONITOR_NAME"


# obtaining TOKEN
get_token
ret="$?"
if [[ ($ret -ne 0) ]]
then
	error 3 "$MSG"
else
	echo RECEIVE TOKEN: "$TOKEN" at `date -u -d @$(( $TOKEN_OBTAIN_TIME/1000 ))`
	echo "All is OK for now."
fi
#
get_data
RESULT_PARAMS="$result"
#
if [[ $1 == "create" ]];then
	# Adding custom monitor
	add_custom_monitor "$MONITOR_NAME" "$MONITOR_TAG" "$RESULT_PARAMS" "$ADDITIONAL_PARAMS" "$MONITOR_TYPE"
ret="$?"
if [[ ($ret -ne 0) ]]
then
	error "$ret" "$MSG"
else
	echo Custom monitor id = "$MONITOR_ID"
	echo "$MONITOR_ID" > $MONITOR_ID_FILE
	echo "All is OK for now."
	fi
fi

if [[ ($MONITOR_ID -le 0) ]]
then 
	echo MonitorId is still zero - try to obtain it from local cache
	if [[ ! -e "$MONITOR_ID_FILE" ]];then
		clear ;echo -e "\e[00;31mThis is because of file manipulations\e[00m"
		echo -e "\e[00;31mDON'T PANIC: Just delete your custom monitor from Monitis.com dashboard and\e[00m"
		echo -e "\e[00;31mrun 'monitis-riak-monitor create' again\e[00m"
		exit 5
	fi
	MONITOR_ID=$(cat $MONITOR_ID_FILE)
	ret="$?"
	if [[ ($ret -ne 0) ]]
	then
		error "Could not get monitor id from local cache [.monitor.id]"
	else
		echo Custom monitor id = "$MONITOR_ID"
		echo "All is OK for now."
	fi
fi

	get_token				# get new token in case of the existing one is too old
	ret="$1"
	if [[ ($ret -ne 0) ]]
	then	# some problems while getting token...
		error "$ret" "$MSG"
		exit 6
	fi
	ret="$1"
	if [[ ($ret -ne 0) ]];then
	    error "$ret" "$MSG"
	    exit 7
	fi

	# Compose monitor data
	get_data
	param=$postdata
	timestamp=`get_timestamp`
	# Sending to Monitis
	add_custom_monitor_data $param $timestamp
	ret="$?"
	if [[ ($ret -ne 0) ]];then
		error "$ret" "$MSG"
		exit 8
	else
		echo $( date +"%D %T" ) - The Custom monitor data were successfully added
	fi





