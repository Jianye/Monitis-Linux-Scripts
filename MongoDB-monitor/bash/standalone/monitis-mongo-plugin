#!/bin/bash
:

#set -x
SED=$(which sed)
AWK=$(which awk)
TAIL=$(which tail)
GREP=$(which grep)
MONGO=$(which mongo)
PREV_FILE=.mmm_prev
empty=0
#
declare OUTPUT
declare prev
declare current
declare result
declare save_value
#
USE_AUTH=false
PARAM_ERROR_STRING="Missing parameter name"
RETURN_CODE=0
##############

#
save(){
	echo "$1"|sed -e 's/^[ \r]*//' > $PREV_FILE
}
##############
usage(){

        echo "Usage: $0 [-user|--user <username> -pwd|--pwd <password>]  -host|--host <hostname> -port|--port <port> -metrics|--metrics <metric1,metric2,metricN>"
echo "Supported metrics are: "
echo ""
echo "  inserts  	- # of inserts per second (* means replicated op)"
echo "  query    	- # of queries per second"
echo "  update   	- # of updates per second"
echo "  delete   	- # of deletes per second"
echo "  getmore  	- # of get mores (cursor batch) per second"
echo "  command  	- # of commands per second, on a slave its local|replicated"
echo "  flushes  	- # of fsync flushes per second"
echo "  mapped   	- amount of data mmaped (total data size) megabytes"
echo "  vsize    	- virtual size of process in megabytes"
echo "  res      	- resident size of process in megabytes"
echo "  faults   	- # of pages faults per sec (linux only)"
echo "  netIn    	- network traffic in - bits"
echo "  netOut   	- network traffic out - bits"

        RETURN_CODE=1
        exit $RETURN_CODE
}
##################################################################################################
# Checking for required tools
##################################################################################################
if [[ -z $SED ]]
then
echo "sed not found"
exit 1
fi
#
if [[ -z $AWK ]]
then
echo "awk not found"
exit 1
fi
#
if [[ -z $MONGO ]]
then
echo "mongo not found"
exit 1
fi
#
if [[ -z $TAIL ]]
then
echo "tail not found"
exit 1
fi
#
if [[ -z $GREP ]]
then
echo "grep not found"
exit 1
fi
#
###################################################################################################
# Checking for input parameters
###################################################################################################
if [[ $# -le 3 ]]
then
	usage
fi
while [ $# -gt 0 ]    # Until run out of parameters . . .
do
	case $1 in
    	-u | --user | -user )  			USERNAME="$2"; shift	;;
    	-p | --pwd | -pwd ) 			PSWD="$2"; shift	;;
    	-h | --host | -host )  			HOST="$2"; shift	;;
    	-t | --port | -port )  			PORT="$2"; shift	;;
    	-m | --metrics | -metrics )		METRICS="$2"; shift ;;
	-d | --database | -database )		DB="$2"; shift ;;
    	*) ;; # unknown option		
  	esac
  	shift
done
#
METRICS=${METRICS/'['/''}
METRICS=${METRICS/%']'/''}
#
if [[ -n $USERNAME ]]
then
	USE_AUTH=true
	if [ -z "$PSWD" ]; then
                echo "$PARAM_ERROR_STRING 'pwd'"
                RETURN_CODE=1
		exit $RETURN_CODE 
        fi

        if [ -z "$HOST" ]; then
                echo "$PARAM_ERROR_STRING 'host'"
                RETURN_CODE=1
		exit $RETURN_CODE
        fi

        if [ -z "$PORT" ]; then
                echo "$PARAM_ERROR_STRING 'port'"
                RETURN_CODE=1
		exit $RETURN_CODE
        fi
	if [ -z "$METRICS" ]; then
		echo "$PARAM_ERROR_STRING 'metrics'"
		RETURN_CODE=1
		exit $RETURN_CODE
	fi

fi
#

#
if [[ $USE_AUTH == true ]]
then
	MONGOSTAT_OPTS=" --host $HOST:$PORT -u $USER -p $PSWD"
else
	MONGOSTAT_OPTS=" --host $HOST:$PORT"
fi
#
if [[ ! -f $PREV_FILE || -z $(cat $PREV_FILE) ]]
then
	empty=1
	
fi
#
#
splited_metrics=$(echo $METRICS|tr ',' ' ')
NOW=$(date '+%s')
BEFORE=$(cat $PREV_FILE|grep 'timestamp'|$AWK '{print $2}')
if [[ -z $BEFORE ]];then
	BEFORE=0
fi
DIFFER=$(( $NOW - $BEFORE ))
save_value="timestamp "$(echo $NOW|sed "s/$/\\`echo -e '\n\r'`/g")
#
for metric in $splited_metrics
do
	case "$metric" in

	"insert")
	test $empty -ne 1 && prev=$(cat $PREV_FILE|grep 'insert'|$AWK '{print $2}')
	current=$($MONGO $MONGOSTAT_OPTS --eval 'db.serverStatus()["opcounters"]["insert"]' $DB|$TAIL -1)
	if [[ -z $prev ]]
	then
		prev=0
	else
		result=$(( ($current-$prev) / $DIFFER))
	fi
	if [[ $result -lt 0 ]]
	then
		echo "wrongResult=true"
		exit
	else
		OUTPUT=" $OUTPUT insert="$result
	fi
	save_value="$save_value insert "$(echo $current|sed "s/$/\\`echo -e '\n\r'`/g")
	;;
##########
	"query")
	test $empty -ne 1 && prev=$(cat $PREV_FILE|grep 'query'|$AWK '{print $2}')
	current=$($MONGO $MONGOSTAT_OPTS --eval 'db.serverStatus()["opcounters"]["query"]' $DB|$TAIL -1)
	if [[ -z $prev ]]
	then
		prev=0
	else
		result=$(( ($current-$prev) / $DIFFER))
	fi
	if [[ $result -lt 0 ]]
	then
		echo "wrongResult=true"
		exit
	else
		OUTPUT=" $OUTPUT query="$result
	fi
	save_value="$save_value query "$(echo $current|sed "s/$/\\`echo -e '\n\r'`/g")
	;;
##########
	"update")
	test $empty -ne 1 && prev=$(cat $PREV_FILE|grep 'update'|$AWK '{print $2}')
	current=$($MONGO $MONGOSTAT_OPTS --eval 'db.serverStatus()["opcounters"]["update"]' $DB|$TAIL -1)
	if [[ -z $prev ]]
	then
		prev=0
	else
		result=$(( ($current-$prev) / $DIFFER))
	fi
	if [[ $result -lt 0 ]]
	then
		echo "wrongResult=true"
		exit
	else
		OUTPUT=" $OUTPUT update="$result
	fi
	save_value="$save_value update "$(echo $current|sed "s/$/\\`echo -e '\n\r'`/g")
	;;
##########
	"delete")
	test $empty -ne 1 && prev=$(cat $PREV_FILE|grep 'delete'|$AWK '{print $2}')
	current=$($MONGO $MONGOSTAT_OPTS --eval 'db.serverStatus()["opcounters"]["delete"]' $DB|$TAIL -1)
	if [[ -z $prev ]]
	then
		prev=0
	else
		result=$(( ($current-$prev) / $DIFFER))
	fi
	if [[ $result -lt 0 ]]
	then
		echo "wrongResult=true"
		exit
	else
		OUTPUT=" $OUTPUT delete="$result
	fi
	save_value="$save_value delete "$(echo $current|sed "s/$/\\`echo -e '\n\r'`/g")
	;;
##########
	"getmore")
	test $empty -ne 1 && prev=$(cat $PREV_FILE|grep 'getmore'|$AWK '{print $2}')
	current=$($MONGO $MONGOSTAT_OPTS --eval 'db.serverStatus()["opcounters"]["getmore"]' $DB|$TAIL -1)
	if [[ -z $prev ]]
	then
		prev=0
	else
		result=$(( ($current-$prev) / $DIFFER))
	fi
	if [[ $result -lt 0 ]]
	then
		echo "wrongResult=true"
		exit
	else
		OUTPUT=" $OUTPUT getmore="$result
	fi
	save_value="$save_value getmore "$(echo $current|sed "s/$/\\`echo -e '\n\r'`/g")
	;;
##########
	"command")
	test $empty -ne 1 && prev=$(cat $PREV_FILE|grep 'command'|$AWK '{print $2}')
	current=$($MONGO $MONGOSTAT_OPTS --eval 'db.serverStatus()["opcounters"]["command"]' $DB|$TAIL -1)
	if [[ -z $prev ]]
	then
		prev=0
	else
		result=$(( ($current-$prev) / $DIFFER))
	fi
	if [[ $result -lt 0 ]]
	then
		echo "wrongResult=true"
		exit
	else
		OUTPUT=" $OUTPUT command="$result
	fi
	save_value="$save_value command "$(echo $current|sed "s/$/\\`echo -e '\n\r'`/g")
	;;
##########
	"flushes")
	test $empty -ne 1 && prev=$(cat $PREV_FILE|grep 'flushes'|$AWK '{print $2}')
	current=$($MONGO $MONGOSTAT_OPTS --eval 'db.serverStatus()["backgroundFlushing"]["flushes"]' $DB|$TAIL -1)
	if [[ -z $prev ]]
	then
		prev=0
	else
		result=$(( ($current-$prev) / $DIFFER))
	fi
	if [[ $result -lt 0 ]]
	then
		echo "wrongResult=true"
		exit
	else
		OUTPUT=" $OUTPUT flushes="$result
	fi
	save_value="$save_value flushes "$(echo $current|sed "s/$/\\`echo -e '\n\r'`/g")
	;;
##########
	"mapped")
	test $empty -ne 1 && prev=$(cat $PREV_FILE|grep 'mapped'|$AWK '{print $2}')
	current=$($MONGO $MONGOSTAT_OPTS --eval 'db.serverStatus()["mem"]["mapped"]' $DB|$TAIL -1)
	if [[ -z $prev ]]
	then
		prev=0
	else
		result=$(( ($current-$prev) / $DIFFER))
	fi
	if [[ $result -lt 0 ]]
	then
		echo "wrongResult=true"
		exit
	else
		OUTPUT=" $OUTPUT mapped="$result
	fi
	save_value="$save_value mapped "$(echo $current|sed "s/$/\\`echo -e '\n\r'`/g")
	;;
##########
	"vsize")
	test $empty -ne 1 && prev=$(cat $PREV_FILE|grep 'vsize'|$AWK '{print $2}')
	current=$($MONGO $MONGOSTAT_OPTS --eval 'db.serverStatus()["mem"]["virtual"]' $DB|$TAIL -1)
	if [[ -z $prev ]]
	then
		prev=0
	else
		result=$(( ($current-$prev) / $DIFFER))
	fi
	if [[ $result -lt 0 ]]
	then
		echo "wrongResult=true"
		exit
	else
		OUTPUT=" $OUTPUT vsize="$result
	fi
	save_value="$save_value vsize "$(echo $current|sed "s/$/\\`echo -e '\n\r'`/g")
	;;
##########
	"res")
	test $empty -ne 1 && prev=$(cat $PREV_FILE|grep 'res'|$AWK '{print $2}')
	current=$($MONGO $MONGOSTAT_OPTS --eval 'db.serverStatus()["mem"]["mapped"]' $DB|$TAIL -1)
	if [[ -z $prev ]]
	then
		prev=0
	else
		result=$(( ($current-$prev) / $DIFFER))
	fi
	if [[ $result -lt 0 ]]
	then
		echo "wrongResult=true"
		exit
	else
		OUTPUT=" $OUTPUT res="$result
	fi
	save_value="$save_value res "$(echo $current|sed "s/$/\\`echo -e '\n\r'`/g")
	;;
##########
	"faults")
	test $empty -ne 1 && prev=$(cat $PREV_FILE|grep 'faults'|$AWK '{print $2}')
	current=$($MONGO $MONGOSTAT_OPTS --eval 'db.serverStatus()["extra_info"]["page_faults"]' $DB|$TAIL -1)
	if [[ -z $prev ]]
	then
		prev=0
	else
		result=$(( ($current-$prev) / $DIFFER))
	fi
	if [[ $result -lt 0 ]]
	then
		echo "wrongResult=true"
		exit
	else
		OUTPUT=" $OUTPUT faults="$result
	fi
	save_value="$save_value faults "$(echo $current|sed "s/$/\\`echo -e '\n\r'`/g")
	;;
##########
	"netIn")
	test $empty -ne 1 && prev=$(cat $PREV_FILE|grep 'netIn'|$AWK '{print $2}')
	current=$($MONGO $MONGOSTAT_OPTS --eval 'db.serverStatus()["network"]["bytesIn"]' $DB|$TAIL -1)
	if [[ -z $prev ]]
	then
		prev=0
	else
		result=$(( ($current-$prev) / $DIFFER))
	fi
	if [[ $result -lt 0 ]]
	then
		echo "wrongResult=true"
		exit
	else
		OUTPUT=" $OUTPUT netIn="$result
	fi
	save_value="$save_value netIn "$(echo $current|sed "s/$/\\`echo -e '\n\r'`/g")
	;;
##########
	"netOut")
	test $empty -ne 1 && prev=$(cat $PREV_FILE|grep 'netOut'|$AWK '{print $2}')
	current=$($MONGO $MONGOSTAT_OPTS --eval 'db.serverStatus()["network"]["bytesOut"]' $DB|$TAIL -1)
	if [[ -z $prev ]]
	then
		prev=0
	else
		result=$(( ($current-$prev) / $DIFFER))
	fi
	if [[ $result -lt 0 ]]
	then
		echo "wrongResult=true"
		exit
	else
		OUTPUT=" $OUTPUT netOut="$result
	fi
	save_value="$save_value netOut "$(echo $current|sed "s/$/\\`echo -e '\n\r'`/g")
	;;
##########

esac
done
#
save "$save_value"
#
if [[ $empty -eq 1 ]]
then
	echo "wrongResult=true"
else
	echo $OUTPUT
fi

exit $RETURN_CODE

